version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.2

commands:
  destroy-environment:
    description: Destroy the back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflow_id:
          type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            # Delete S3 files
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here   
      workflow_id:
          type: string  
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in #SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/K5bz9MUV2hetKccYYUL94K/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: [frontend-build]
    - run:
        name: Front-end test
        command: |
           cd frontend
           npm install
           npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: [backend-build]
    - run:
        name: Back-end test
        command: |
           cd backend
           npm install
           npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end audit
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end audit
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID} \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text >> ./.circleci/ansible/inventory.txt

            # echo ${INSTANCE_IP} >> ./.circleci/ansible/inventory.txt
            # echo INSTANCE_IP ${INSTANCE_IP}
            curl https://kvdb.io/K5bz9MUV2hetKccYYUL94K/IP \
            -d $(aws ec2 describe-instances \
            --filters Name=tag:Name,Values=backend-$CIRCLE_WORKFLOW_ID \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
      - run:
          name: Tar dependency
          command: |
            yum -y install tar gzip jq npm
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure   
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID}   

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8a:eb:67:5d:01:db:0f:c4:93:33:85:db:10:3d:4d:84:26:62:f9:5c"]
      - attach_workspace:
          at: ./.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible
      - run:
          name: verify ansible hosts
          command: |
            ansible all --list-hosts
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            echo PWD $(pwd)
            ansible-playbook -i inventory.txt configure-server.yml
  #     # Here's where you will add some code to rollback on failure    
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID}  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
            curl --insecure https://kvdb.io/K5bz9MUV2hetKccYYUL94K/migration_${CIRCLE_WORKFLOW_ID}  -d '1'
            else
            curl --insecure https://kvdb.io/K5bz9MUV2hetKccYYUL94K/migration_${CIRCLE_WORKFLOW_ID}  -d '0'            
            fi
  # #    # Here's where you will add some code to rollback on failure      
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl https://kvdb.io/K5bz9MUV2hetKccYYUL94K/IP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd frontend
            npm install
            npm run build
            ls -alh
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
      # Here's where you will add some code to rollback on failure 
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID}     
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID}
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8a:eb:67:5d:01:db:0f:c4:93:33:85:db:10:3d:4d:84:26:62:f9:5c"]
      - attach_workspace:
          at: ./.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update curl
            pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            # cd backend
            # npm install
            # npm run build
            # cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files 
            cp -p artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
  #     # Here's where you will add some code to rollback on failure  
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.12 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            # BACKEND_IP=$(curl https://kvdb.io/K5bz9MUV2hetKccYYUL94K/IP)
            # export API_URL="http://${BACKEND_IP}:3030"
            # echo "${API_URL}"
            # if curl "${API_URL}/api/status" | grep "ok"
            # then
            #     return 0
            # else
            #     return 1
            # fi
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            echo "http://${BACKEND_IP}:3030/api/status"
            if curl "http://${BACKEND_IP}:3030/api/status" | grep "ok"
            then 
              return 0
            else 
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
       # Here's where you will add some code to rollback on failure  
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum -y install tar gzip
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation list-exports \
  #           --query "Exports[?Name=='WorkflowID'].Value" \
  #           --no-paginate --output text)
            
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --stack-name "rolake-udapeople" \
  #             --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID}" \
  #             --tags project=udapeople
            
  #           echo OldWorkflowID: "${OldWorkflowID}"
  #           echo CurrentWorkflowID: "${CIRCLE_WORKFLOW_ID}"
  #     # Here's where you will add some code to rollback on failure  
  #     - revert-migrations: 
  #         workflow_id: ${CIRCLE_WORKFLOW_ID}
  #     - destroy-environment: 
  #         workflow_id: ${CIRCLE_WORKFLOW_ID}

  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation list-exports \
  #           --query "Exports[?Name=='WorkflowID'].Value" \
  #           --no-paginate --output text)
  #           echo OldWorkflowID: "${OldWorkflowID}"
  #           echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID}"

  #           export STACKS=$(aws cloudformation list-stacks \
  #           --query "StackSummaries[*].StackName" \
  #           --stack-status-filter CREATE_COMPLETE \
  #           --no-paginate --output text)
  #           echo Stack names: "${STACKS[@]}"
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           if [[ "${CIRCLE_WORKFLOW_ID}" =~ "${OldWorkflowID}" ]]
  #           then
  #             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #           fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]